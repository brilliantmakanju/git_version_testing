name: Tag Build

on:
  push:
    branches:
      - 'release/**'
      - 'hotfix/**'
      - dev
      - main

env:
  # (Your env variables here)

jobs:
  tag_build:
    name: Tag Build
    runs-on: ubuntu-20.04.6
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch all history for all tags and branches
        run: git fetch --unshallow && git checkout dev && git checkout main

      - name: Tag
        id: 'tag'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions"

          echo "Changed services: ${{ steps.calculate_changed_services.outputs.changed_services }}"

          changed_services=( ${{ fromJSON(steps.calculate_changed_services.outputs.changed_services) }} )
          if [ ${#changed_services[@]} -eq 0 ]; then
            echo "No changed services detected."
          else
            echo "Detected ${#changed_services[@]} changed service(s)."
          fi
          
          for svc in "${changed_services[@]}"; do
            echo "Processing service: ${svc}"
            docker run --rm -v "$(pwd):/repo" $GITVERSION /repo /config "/repo/${svc}/.gitversion.yml"
            gitversion_calc=$(docker run --rm -v "$(pwd):/repo" $GITVERSION /repo /config "/repo/${svc}/.gitversion.yml")
            
            GITVERSION_TAG_PROPERTY_NAME="GITVERSION_TAG_PROPERTY_$(echo '${{ steps.calculate_changed_services.outputs.diff_dest }}' | sed 's|/.*$||' | tr '[[:lower:]]' '[[:upper:]]')"
            GITVERSION_TAG_PROPERTY=${!GITVERSION_TAG_PROPERTY_NAME}
            
            svc_without_prefix=$(echo "${svc}" | sed "s|^apps/||")
            service_version=$(echo "${gitversion_calc}" | jq -r "[${GITVERSION_TAG_PROPERTY}] | join(\"\")")
            
            if [ "${GITVERSION_TAG_PROPERTY}" != ".MajorMinorPatch" ]; then
              echo "Tagging non-main branch with filter: ^${svc_without_prefix}/v$(echo "${gitversion_calc}" | jq -r ".MajorMinorPatch")-$(echo "${gitversion_calc}" | jq -r ".PreReleaseLabel")"
              previous_commit_count=$(git tag -l | grep "^${svc_without_prefix}/v$(echo "${gitversion_calc}" | jq -r ".MajorMinorPatch")-$(echo "${gitversion_calc}" | jq -r ".PreReleaseLabel")" | grep -o -E '\.[0-9]+$' | grep -o -E '[0-9]+$' | sort -nr | head -1)
              next_commit_count=$((previous_commit_count+1))
              full_service_version="${service_version}.${next_commit_count}"
            else
              full_service_version="${service_version}"
            fi
            
            echo "Creating tag: ${svc_without_prefix}/v${full_service_version}"
            git tag -a "${svc_without_prefix}/v${full_service_version}" -m "${svc_without_prefix}/v${full_service_version}"
            git push origin "${svc_without_prefix}/v${full_service_version}"
          done
